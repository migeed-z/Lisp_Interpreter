Done:

- override str method for printing
- override len method for sl lists

-- reader
Run tests on venv
change reader to use raw input function to read lines
add run file
get the return value of eval from read seperately
reader test (bug here)

parser for: < > = and

parser for if condition

add equals and add parser (function application)
add if condition
 *modification to parser code to recognise sexpr* verify!

*can we cancel if and else branch*

finding datatype for string: issue here!!
raw text??


#TODO for reader
-- Test for Read -- next time!!!

#TODO for parser
- find a datatype for strings

#TODO for interpreter
- add lists: http://www.ccs.neu.edu/home/matthias/HtDP2e/part_two.html#%28part._sec~3alists-cons%29


#TODO:

$ cat my_interpreter_in_bsl_for_bsl > ./Read.py
# in my_interpre ..
# ;; RepresentationOfBsLExpression -> Number
# (define (evaluator e)
#     ...)
# (evaluator (make-posn "+" (make-posn 1 (make-posn 1 EMPTY))))
# how do you represent (+ 1 1)
# in your Python interpreter you use Add([Num(1),NUm(1)])
# what do you use in your BSL interpreter, the one you write in YOUR bsl





Exercise 332. Formulate a data definition for the class of values to which a representation of a BSL expression can evaluate. image

Exercise 333. Design eval-expression. The function consumes a representation of a BSL expression (according to exercise 331) and computes its value. image

Exercise 334. Develop a data representation for boolean BSL expressions constructed from #true, #false, and, or, and not. Then design eval-bool-expression. The function consumes a representative of boolean BSL expression and computes its value. What is the value of a Boolean expression? image

Exercise 335. S-expressions offer a convenient way to express BSL:
